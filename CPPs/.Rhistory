# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
# load the arcgis license
arc.check_product()
input = "C://Users//mmoore//Desktop//temp_databases//et_check//SpecID_Table.csv"
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
input = read.csv(input,header=TRUE)
et <- arc.open(et)
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
# load the arcgis license
arc.check_product()
input = "C://Users//mmoore//Desktop//temp_databases//et_check//SpecID_Table.csv"
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
input = read.csv(input,header=TRUE)
et <- arc.open(et)
et <- arc.select(et)
et_filter <- filter(et,et$EO_TRACK != "N")
View(et_filter)
View(et_filter)
merge <- merge(x=et_filter,y=input,by.x=et_filter$ELSUBID,by.y=input$ElSubID,all=TRUE)
merge <- merge(x=et_filter,y=input,by.x="ELSUBID",by.y="ElSubID",all=TRUE)
View(merge)
View(input)
filter(input,!is.null(input$TRACKING_STATUS)&&!is.null(input$specid))
f <- filter(input,!is.null(input$TRACKING_STATUS)&&!is.null(input$specid))
View(f)
f <- filter(input,is.null(input$TRACKING_STATUS)==TRUE&&is.null(input$specid)==TRUE)
View(f)
input_filter <- filter(input,is.null(input$TRACKING_STATUS)==FALSE)
input_filter <- filter(input,is.null(input$TRACKING_STATUS)!=TRUE)
View(input_filter)
input_filter <- filter(input,input$TRACKING_STATUS!="N")
input_filter <- input[!(is.na(input$TRACKING_STATUS)||input$TRACKING_STATUS==""),]
input_filter <- input[!is.na(input$TRACKING_STATUS),]
input_filter <- input[input$TRACKING_STATUS!="",]
View(input_filter)
merge <- merge(x=et_filter,y=input_filter,by.x="ELSUBID",by.y="ElSubID",all=TRUE)
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
# load the arcgis license
arc.check_product()
input = "C://Users//mmoore//Desktop//temp_databases//et_check//SpecID_Table.csv"
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
input = read.csv(input,header=TRUE)
et <- arc.open(et)
et <- arc.select(et)
et_filter <- filter(et,et$EO_TRACK != "N")
input_filter <- input[input$TRACKING_STATUS!="",]
merge <- merge(x=et_filter,y=input_filter,by.x="ELSUBID",by.y="ElSubID",all=TRUE)
View(merge)
write.csv(merge,"C://Users//mmoore//Desktop//temp_databases//et_check//SpecID_Table_updated.csv",row.names=FALSE)
View(merge)
View(input)
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
if (!requireNamespace("RSQLite", quietly=TRUE)) install.packages("RSQLite")
require(RSQLite)
# load the arcgis license
arc.check_product()
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
et <- arc.open(et)
et <- arc.select(et)
et_filter <- filter(et,et$EO_TRACK != "N")
db_name <- "W:/Heritage/Heritage_Data/CPP/CPP_Specs/CPP_SpecID.sqlite"
db <- dbConnect(SQLite(), dbname = db_name)
SQLquery <- paste("SELECT ELSUBID, specid, specid_2, specid_3, specid_comments"," FROM SpecID_Table ")
spec_id <- dbGetQuery(db, statement = SQLquery)
SQLquery <- paste("SELECT ELSUBID, specid, specid_2, specid_3, specid_comments"," FROM SpecID_Table;")
spec_id <- dbGetQuery(db, statement = SQLquery)
dbDisconnect(db) # disconnect the db
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
if (!requireNamespace("RSQLite", quietly=TRUE)) install.packages("RSQLite")
require(RSQLite)
# load the arcgis license
arc.check_product()
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
et <- arc.open(et)
et <- arc.select(et)
et_filter <- filter(et,et$EO_TRACK != "N")
db_name <- "W:/Heritage/Heritage_Data/CPP/CPP_Specs/CPP_SpecID.sqlite"
db <- dbConnect(SQLite(), dbname = db_name)
SQLquery <- paste("SELECT ELSUBID, specid, specid_2, specid_3, specid_comments"," FROM SpecID_Table;")
spec_id <- dbGetQuery(db, statement = SQLquery)
dbDisconnect(db) # disconnect the db
View(spec_id)
#merge <- merge(x=et_filter,y=input_filter,by.x="ELSUBID",by.y="ElSubID",all=TRUE)
spec_merge <- merge(x = spec_id, y = et, by = "ELSUBID", all.x = TRUE)
View(spec_merge)
names(spec_merge)
spec_columns <- c("ELSUBID","ELCODE","SNAME","SCOMNAME","specid","specid_2","specid_3","specid_comments","ER_RULE","GRANK","SRANK","SRANK_CHGDT","SRANK_RVWDT","EO_TRACK","USESA","SPROT","PBSSTATUS","PBSDATE","PBSQUAL","SGCN","SGCN_COM","SENSITV_SP")
spec_table <- spec_merge[,spec_columns]
View(spec_table)
spec_columns <- c("ELSUBID","ELCODE","SNAME","SCOMNAME","specid","specid_2","specid_3","specid_comments","EO_TRACK","ER_RULE","GRANK","SRANK","SRANK_CHGDT","SRANK_RVWDT","USESA","SPROT","PBSSTATUS","PBSDATE","PBSQUAL","SGCN","SGCN_COM","SENSITV_SP")
spec_table <- spec_merge[,spec_columns]
View(spec_table)
Sys.Date()
date <- gsub("-","_",Sys.Date())
spec_table_name <- paste0("SpecID_Table_",date)
date <- gsub("-","",Sys.Date())
spec_table_name <- paste0("SpecID_Table_",date)
write.csv(merge,paste(spec_folder,spec_table_name,"/"),row.names=FALSE)
write.csv(spec_table,paste(spec_folder,spec_table_name,"/"),row.names=FALSE)
spec_folder <- "W:/Heritage/Heritage_Data/CPP/CPP_Specs"
write.csv(spec_table,paste(spec_folder,spec_table_name,"/"),row.names=FALSE)
write.csv(spec_table,paste(spec_folder,spec_table_name, sep = "/"),row.names=FALSE)
spec_table_name <- paste0("SpecID_Table_",date,".csv")
write.csv(spec_table,paste(spec_folder,spec_table_name, sep = "/"),row.names=FALSE)
